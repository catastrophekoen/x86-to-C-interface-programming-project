#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// Declare the external assembly function
extern void compute_accelerations(int num_cars, double* input_matrix, int* output_results);

// Function to compute acceleration in C
void compute_accelerations_c(int num_cars, double* input_matrix, int* output_results) {
	int i;
    for ( i = 0; i < num_cars; i++) {
        double initial_velocity = input_matrix[i * 3];     // Vi (km/h)
        double final_velocity = input_matrix[i * 3 + 1];   // Vf (km/h)
        double time = input_matrix[i * 3 + 2];             // T (seconds)

        // Convert velocities from km/h to m/s
        initial_velocity = (initial_velocity * 1000.0) / 3600.0;
        final_velocity = (final_velocity * 1000.0) / 3600.0;

        // Calculate acceleration: (Vf - Vi) / T
        double acceleration = (final_velocity - initial_velocity) / time;

        // Round to nearest integer
        int rounded_acceleration = (int)(acceleration + 0.5);

        // Handle overflow by checking if the result is valid
        if (acceleration > INT_MAX || acceleration < INT_MIN) {
            output_results[i] = -1;  // Sentinel value for overflow
        } else {
            output_results[i] = rounded_acceleration;
        }
    }
}

int main() {
    int num_cars;
    int i;

    // Get the number of cars from the user
    //printf("Enter the number of cars: ");
    scanf("%d", &num_cars);

    // Allocate memory for the input matrix and output results
    double* input_matrix = (double*)malloc(num_cars * 3 * sizeof(double));
    int* output_results_c = (int*)malloc(num_cars * sizeof(int));
    int* output_results_asm = (int*)malloc(num_cars * sizeof(int));

    if (!input_matrix || !output_results_c || !output_results_asm) {
        printf("Memory allocation failed.\n");
        return 1;
    }

    // Input data for each car
    //printf("Enter the matrix values (Initial Velocity, Final Velocity, Time):\n");
    for (i = 0; i < num_cars; i++) {
        //printf("Car %d: ", i + 1);
        scanf("%lf,%lf,%lf", &input_matrix[i * 3], &input_matrix[i * 3 + 1], &input_matrix[i * 3 + 2]);
    }

    // Compute accelerations in C
    clock_t start_c = clock();
    compute_accelerations_c(num_cars, input_matrix, output_results_c);
    clock_t end_c = clock();

    // Compute accelerations in Assembly
    clock_t start_asm = clock();
    compute_accelerations(num_cars, input_matrix, output_results_asm);
    clock_t end_asm = clock();

    // Display results
    printf("\nResults:\n");
    printf("C:\t\tAssembly:\n");
    for ( i = 0; i < num_cars; i++) {
        if (output_results_c[i] == -1) {
            printf("Overflow\t");
        } else {
            printf("%d\t\t", output_results_c[i]);
        }

        if (output_results_asm[i] == -1) {
            printf("Overflow\n");
        } else {
            printf("%d\n", output_results_asm[i]);
        }
    }

    // Display execution times
    double time_c = (double)(end_c - start_c) / CLOCKS_PER_SEC;
    double time_asm = (double)(end_asm - start_asm) / CLOCKS_PER_SEC;
    printf("\nExecution time:\n");
    printf("C: %.5f seconds\n", time_c);
    printf("Assembly: %.5f seconds\n", time_asm);

    // Free allocated memory
    free(input_matrix);
    free(output_results_c);
    free(output_results_asm);

    return 0;
}

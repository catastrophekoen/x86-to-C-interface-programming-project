#include <stdio.h>
#include <stdlib.h>
#include <windows.h>

// Declare the external assembly function
extern void compute_accelerations(int num_cars, double* input_matrix, int* output_results);

int main() {
    int num_cars = 10000; // Can change this to 10, 100, 1000, etc.
    int num_runs = 30;
    int i, j;

    double* input_matrix = (double*)malloc(num_cars * 3 * sizeof(double));
    int* output_results = (int*)malloc(num_cars * sizeof(int));

    if (!input_matrix || !output_results) {
        printf("Memory allocation failed.\n");
        return 1;
    }

    // Initialize input_matrix with sample values
    for (i = 0; i < num_cars; i++) {
        input_matrix[i * 3] = 30.0;      // Initial velocity (km/h)
        input_matrix[i * 3 + 1] = 160.7; // Final velocity (km/h)
        input_matrix[i * 3 + 2] = 7.8;   // Time (seconds)
    }

    double total_time = 0.0;

    printf("Input size (num_cars): %d\n", num_cars);

    LARGE_INTEGER frequency, start, end;
    QueryPerformanceFrequency(&frequency); 

    // Run the acceleration computation multiple times to average execution time
    for (j = 0; j < num_runs; j++) {
        QueryPerformanceCounter(&start); // Start timer
        compute_accelerations(num_cars, input_matrix, output_results);
        QueryPerformanceCounter(&end);   // End timer

        double run_time = (double)(end.QuadPart - start.QuadPart) / frequency.QuadPart;
        total_time += run_time;

        // Output the time for each individual run
        printf("Run %d time: %.5f seconds\n", j + 1, run_time);
    }

    double average_time = total_time / num_runs;

    // Display the final average execution time
    printf("Average execution time: %.5f seconds\n", average_time);

    // Free allocated memory
    free(input_matrix);
    free(output_results);

    return 0;
}
